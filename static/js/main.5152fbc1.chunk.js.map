{"version":3,"sources":["Viewer.js","App.js","index.js"],"names":["Viewer","props","my_json_object","this","src","Component","App","json","elements","type","name","title","isRequired","surveyJSON","showProgressBar","pages","questions","choices","hasOther","visibleIf","onComplete","survey","options","setState","isDone","result","data","console","log","state","undefined","className","model","Survey","ReactDOM","render","StrictMode","path","document","getElementById"],"mappings":"8RAGqBA,E,kDACjB,WAAYC,GAAO,uCACTA,G,qDAEA,IACCC,EAAkB,CAACC,KAAKF,OAD1B,GAGL,OACI,8BACI,cAAC,IAAD,CAAWG,IAAKF,U,GATIG,aCGfC,E,kDAmBnB,WAAYL,GAAO,IAAD,8BAChB,cAAMA,IAnBRM,KAAO,CACLC,SAAU,CACR,CAAEC,KAAM,OAAQC,KAAM,eAAgBC,MAAO,qBAAsBC,YAAY,KAgBjE,EAZjBC,WAAa,CAAEF,MAAO,yCAA0CG,gBAAiB,MAAOC,MAAO,CAC9F,CAAEL,KAAK,QAASM,UAAW,CACvB,CAAEP,KAAM,aAAcQ,QAAS,CAAE,MAAO,MAAQL,YAAY,EAAMF,KAAM,iBAAiBC,MAAO,sDAChG,CAAEF,KAAM,WAAYQ,QAAS,CAAC,YAAY,cAAeC,UAAU,EAAMN,YAAY,EAAMF,KAAM,YAAaC,MAAO,uCAAwCQ,UAAW,8BAE5K,CAAET,KAAM,QAASM,UAAW,CAC1B,CAAEP,KAAM,aAAcQ,QAAS,CAAC,MAAM,MAAML,YAAY,EAAMF,KAAM,YAAaC,MAAO,kCACxF,CAAEF,KAAM,WAAYQ,QAAS,CAAE,YAAa,aAAc,SAAWC,UAAU,EAAMN,YAAY,EAAMF,KAAM,OAAQC,MAAO,kCAAmCQ,UAAW,yBAC5K,CAAET,KAAM,QAAQM,UAAW,CACzB,CAAEP,KAAM,UAAWC,KAAM,QAASC,MAAO,sEAG3B,EAOlBS,WAAa,SAACC,EAAQC,GAEpB,EAAKC,SAAS,CAACC,QAAO,EAAMC,OAAQJ,EAAOK,OAC3CC,QAAQC,IAAI,mBAAqBP,EAAOK,OARxC,EAAKG,MAAM,CACTL,QAAO,EACPC,YAAQK,GAJM,E,qDAchB,GAAK3B,KAAK0B,MAAML,OAUd,OACM,qBAAKO,UAAU,YAAf,SAEA,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,cAAf,+CAGA,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,CAAQ7B,eAAgBC,KAAK0B,MAAMJ,gBAjB7C,IAAIO,EAAQ,IAAIC,QAAa9B,KAAKU,YAElC,OACE,qBAAKkB,UAAU,YAAf,SACE,cAAC,SAAD,CAAiBC,MAAOA,EAAOZ,WAAYjB,KAAKiB,mB,GAtCzBf,a,uBCOjC6B,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,QAAZ,SACE,cAAC,EAAD,CAAQnC,oBAAgB4B,WAI9BQ,SAASC,eAAe,W","file":"static/js/main.5152fbc1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport ReactJson from 'react-json-view'\r\n\r\nexport default class Viewer extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render() {\r\n        const [my_json_object] = [this.props];\r\n\r\n        return (\r\n            <div>\r\n                <ReactJson src={my_json_object} />    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import './App.css';\nimport * as Survey from \"survey-react\";\nimport \"survey-react/survey.css\";\nimport { Component } from 'react';\nimport Viewer from './Viewer';\n\nexport default class App extends Component{\n  json = {\n    elements: [\n      { type: \"text\", name: \"customerName\", title: \"What is your name?\", isRequired: true}\n    ]\n  };\n  \n   surveyJSON = { title: \"Tell us, what technologies do you use?\", showProgressBar: \"top\", pages: [\n    { name:\"page1\", questions: [ \n        { type: \"radiogroup\", choices: [ \"Yes\", \"No\" ], isRequired: true, name: \"frameworkUsing\",title: \"Do you use any front-end framework like Bootstrap?\" },\n        { type: \"checkbox\", choices: [\"Bootstrap\",\"Foundation\"], hasOther: true, isRequired: true, name: \"framework\", title: \"What front-end framework do you use?\", visibleIf: \"{frameworkUsing} = 'Yes'\" }\n     ]},\n    { name: \"page2\", questions: [\n      { type: \"radiogroup\", choices: [\"Yes\",\"No\"],isRequired: true, name: \"mvvmUsing\", title: \"Do you use any MVVM framework?\" },\n      { type: \"checkbox\", choices: [ \"AngularJS\", \"KnockoutJS\", \"React\" ], hasOther: true, isRequired: true, name: \"mvvm\", title: \"What MVVM framework do you use?\", visibleIf: \"{mvvmUsing} = 'Yes'\" } ] },\n    { name: \"page3\",questions: [\n      { type: \"comment\", name: \"about\", title: \"Please tell us about your main requirements for Survey library\" } ] }\n   ]\n  }\n  constructor(props){\n    super(props);\n    this.state={\n      isDone:false,\n      result: undefined,\n    };\n  }\n  onComplete = (survey, options) => {\n    //Write survey results into database\n    this.setState({isDone:true, result: survey.data});\n    console.log(\"Survey results: \" , survey.data);\n   }\n\n  render(){\n    if(! this.state.isDone){\n      var model = new Survey.Model(this.surveyJSON);\n      \n      return (\n        <div className=\"container\">\n          <Survey.Survey   model={model} onComplete={this.onComplete}/>\n        </div>\n      );\n    }\n    else \n      return (\n            <div className=\"container\">\n\n            <div className=\"card\">\n              <div className=\"card-header\">\n                This is the result of your survay\n              </div>\n              <div className=\"card-body\">\n                <Viewer my_json_object={this.state.result} />\n              </div>\n            </div>\n          </div>\n      );\n  }\n }\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Viewer from './Viewer';\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Router>\n      <Route path=\"/\">\n          <App/>\n      </Route>\n      <Route path=\"/view\">\n        <Viewer my_json_object={undefined}/>\n      </Route>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}